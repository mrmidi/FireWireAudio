// include/FWA/DiceDefines.hpp
#pragma once

#include <cstdint>

namespace FWA
{
	namespace DICE
	{

// DICE version definition
#define DICE_VER_1_0_7_0

#define DICE_INVALID_OFFSET 0xFFFFF00000000000ULL

/*
 * This header is based upon the DICE II driver specification
 * version 1.0.7.0 from libffado
 */

// Register addresses & offsets
//  DICE_PRIVATE_SPACE registers
#define DICE_REGISTER_BASE 0x0000FFFFE0000000ULL

#define DICE_REGISTER_GLOBAL_PAR_SPACE_OFF 0x0000
#define DICE_REGISTER_GLOBAL_PAR_SPACE_SZ 0x0004
#define DICE_REGISTER_TX_PAR_SPACE_OFF 0x0008
#define DICE_REGISTER_TX_PAR_SPACE_SZ 0x000C
#define DICE_REGISTER_RX_PAR_SPACE_OFF 0x0010
#define DICE_REGISTER_RX_PAR_SPACE_SZ 0x0014
#define DICE_REGISTER_UNUSED1_SPACE_OFF 0x0018
#define DICE_REGISTER_UNUSED1_SPACE_SZ 0x001C
#define DICE_REGISTER_UNUSED2_SPACE_OFF 0x0020
#define DICE_REGISTER_UNUSED2_SPACE_SZ 0x0024

//  GLOBAL_PAR_SPACE registers
#define DICE_REGISTER_GLOBAL_OWNER 0x0000
#define DICE_REGISTER_GLOBAL_NOTIFICATION 0x0008
#define DICE_REGISTER_GLOBAL_NICK_NAME 0x000C
#define DICE_REGISTER_GLOBAL_CLOCK_SELECT 0x004C
#define DICE_REGISTER_GLOBAL_ENABLE 0x0050
#define DICE_REGISTER_GLOBAL_STATUS 0x0054
#define DICE_REGISTER_GLOBAL_EXTENDED_STATUS 0x0058
#define DICE_REGISTER_GLOBAL_SAMPLE_RATE 0x005C
#define DICE_REGISTER_GLOBAL_VERSION 0x0060
#define DICE_REGISTER_GLOBAL_CLOCKCAPABILITIES 0x0064
#define DICE_REGISTER_GLOBAL_CLOCKSOURCENAMES 0x0068

//  TX_PAR_SPACE registers
#define DICE_REGISTER_TX_NB_TX 0x0000
#define DICE_REGISTER_TX_SZ_TX 0x0004

#define DICE_REGISTER_TX_ISOC_BASE 0x0008
#define DICE_REGISTER_TX_NB_AUDIO_BASE 0x000C
#define DICE_REGISTER_TX_MIDI_BASE 0x0010
#define DICE_REGISTER_TX_SPEED_BASE 0x0014
#define DICE_REGISTER_TX_NAMES_BASE 0x0018
#define DICE_REGISTER_TX_AC3_CAPABILITIES_BASE 0x0118
#define DICE_REGISTER_TX_AC3_ENABLE_BASE 0x011C

#define DICE_REGISTER_TX_PARAM(size, i, offset) \
	(((i) * (size)) + (offset))

//  RX_PAR_SPACE registers
#define DICE_REGISTER_RX_NB_RX 0x0000
#define DICE_REGISTER_RX_SZ_RX 0x0004

#ifdef DICE_VER_1_0_7_0
#define DICE_REGISTER_RX_ISOC_BASE 0x0008
#define DICE_REGISTER_RX_SEQ_START_BASE 0x000C
#define DICE_REGISTER_RX_NB_AUDIO_BASE 0x0010
#define DICE_REGISTER_RX_MIDI_BASE 0x0014
#define DICE_REGISTER_RX_NAMES_BASE 0x0018
#define DICE_REGISTER_RX_AC3_CAPABILITIES_BASE 0x0118
#define DICE_REGISTER_RX_AC3_ENABLE_BASE 0x011C
#endif

#define DICE_REGISTER_RX_PARAM(size, i, offset) \
	(((i) * (size)) + (offset))

// Register Bitfields
//  GLOBAL_PAR_SPACE registers
//   OWNER register defines
#define DICE_OWNER_NO_OWNER 0xFFFF000000000000LLU

//   NOTIFICATION register defines
#define DICE_NOTIFY_RX_CFG_CHG_BIT (1UL << 0)
#define DICE_NOTIFY_TX_CFG_CHG_BIT (1UL << 1)
#define DICE_NOTIFY_DUP_ISOC_BIT (1UL << 2)
#define DICE_NOTIFY_BW_ERR_BIT (1UL << 3)
#define DICE_NOTIFY_LOCK_CHG_BIT (1UL << 4)
#define DICE_NOTIFY_CLOCK_ACCEPTED (1UL << 5)
#define DICE_INTERFACE_CHG_BIT (1UL << 6)

// User notifications
#define DICE_NOTIFY_RESERVED1 (1UL << 16)
#define DICE_NOTIFY_RESERVED2 (1UL << 17)
#define DICE_NOTIFY_RESERVED3 (1UL << 18)
#define DICE_NOTIFY_RESERVED4 (1UL << 19)
#define DICE_NOTIFY_MESSAGE (1UL << 20)
#define DICE_NOTIFY_USER1 (1UL << 21)
#define DICE_NOTIFY_USER2 (1UL << 22)
#define DICE_NOTIFY_USER3 (1UL << 23)
#define DICE_NOTIFY_USER4 (1UL << 24)
#define DICE_NOTIFY_USER5 (1UL << 25)
#define DICE_NOTIFY_USER6 (1UL << 26)
#define DICE_NOTIFY_USER7 (1UL << 27)
#define DICE_NOTIFY_USER8 (1UL << 28)
#define DICE_NOTIFY_USER9 (1UL << 29)
#define DICE_NOTIFY_USER10 (1UL << 30)
#define DICE_NOTIFY_USER11 (1UL << 31)

#define DICE_NOTIFY_USER_IS_MESSAGE(x) \
	(((x) & DICE_NOTIFY_MESSAGE) != 0)

#define DICE_NOTIFY_USER_GET_MESSAGE(x) \
	(((x) >> 24) & 0xFF)

//   NICK_NAME register
// NOTE: in bytes
#define DICE_NICK_NAME_SIZE 64

//   CLOCK_SELECT register
// Clock sources supported
#define DICE_CLOCKSOURCE_AES1 0x00
#define DICE_CLOCKSOURCE_AES2 0x01
#define DICE_CLOCKSOURCE_AES3 0x02
#define DICE_CLOCKSOURCE_AES4 0x03
#define DICE_CLOCKSOURCE_AES_ANY 0x04
#define DICE_CLOCKSOURCE_ADAT 0x05
#define DICE_CLOCKSOURCE_TDIF 0x06
#define DICE_CLOCKSOURCE_WC 0x07
#define DICE_CLOCKSOURCE_ARX1 0x08
#define DICE_CLOCKSOURCE_ARX2 0x09
#define DICE_CLOCKSOURCE_ARX3 0x0A
#define DICE_CLOCKSOURCE_ARX4 0x0B
#define DICE_CLOCKSOURCE_INTERNAL 0x0C
#define DICE_CLOCKSOURCE_COUNT (DICE_CLOCKSOURCE_INTERNAL + 1)

#define DICE_CLOCKSOURCE_MASK 0x0000FFFFLU
#define DICE_GET_CLOCKSOURCE(reg) (((reg) & DICE_CLOCKSOURCE_MASK))
#define DICE_SET_CLOCKSOURCE(reg, clk) (((reg) & ~DICE_CLOCKSOURCE_MASK) | ((clk) & DICE_CLOCKSOURCE_MASK))

// Supported rates
#define DICE_RATE_32K 0x00
#define DICE_RATE_44K1 0x01
#define DICE_RATE_48K 0x02
#define DICE_RATE_88K2 0x03
#define DICE_RATE_96K 0x04
#define DICE_RATE_176K4 0x05
#define DICE_RATE_192K 0x06
#define DICE_RATE_ANY_LOW 0x07
#define DICE_RATE_ANY_MID 0x08
#define DICE_RATE_ANY_HIGH 0x09
#define DICE_RATE_NONE 0x0A

#define DICE_RATE_MASK 0x0000FF00LU
#define DICE_GET_RATE(reg) (((reg) & DICE_RATE_MASK) >> 8)
#define DICE_SET_RATE(reg, rate) (((reg) & ~DICE_RATE_MASK) | (((rate) << 8) & DICE_RATE_MASK))

//   ENABLE register
#define DICE_ISOSTREAMING_ENABLE (1UL << 0)
#define DICE_ISOSTREAMING_DISABLE (0)

//   CLOCK_STATUS register
#define DICE_STATUS_SOURCE_LOCKED (1UL << 0)
#define DICE_STATUS_RATE_CONFLICT (1UL << 1)

#define DICE_STATUS_GET_NOMINAL_RATE(x) (((x) >> 8) & 0xFF)

//   EXTENDED_STATUS register
#define DICE_EXT_STATUS_AES0_LOCKED (1UL << 0)
#define DICE_EXT_STATUS_AES1_LOCKED (1UL << 1)
#define DICE_EXT_STATUS_AES2_LOCKED (1UL << 2)
#define DICE_EXT_STATUS_AES3_LOCKED (1UL << 3)
#define DICE_EXT_STATUS_AES_ANY_LOCKED (0x0F)
#define DICE_EXT_STATUS_ADAT_LOCKED (1UL << 4)
#define DICE_EXT_STATUS_TDIF_LOCKED (1UL << 5)
#define DICE_EXT_STATUS_ARX1_LOCKED (1UL << 6)
#define DICE_EXT_STATUS_ARX2_LOCKED (1UL << 7)
#define DICE_EXT_STATUS_ARX3_LOCKED (1UL << 8)
#define DICE_EXT_STATUS_ARX4_LOCKED (1UL << 9)
#define DICE_EXT_STATUS_WC_LOCKED (1UL << 10)

#define DICE_EXT_STATUS_AES0_SLIP (1UL << 16)
#define DICE_EXT_STATUS_AES1_SLIP (1UL << 17)
#define DICE_EXT_STATUS_AES2_SLIP (1UL << 18)
#define DICE_EXT_STATUS_AES3_SLIP (1UL << 19)
#define DICE_EXT_STATUS_ADAT_SLIP (1UL << 20)
#define DICE_EXT_STATUS_TDIF_SLIP (1UL << 21)
#define DICE_EXT_STATUS_ARX1_SLIP (1UL << 22)
#define DICE_EXT_STATUS_ARX2_SLIP (1UL << 23)
#define DICE_EXT_STATUS_ARX3_SLIP (1UL << 24)
#define DICE_EXT_STATUS_ARX4_SLIP (1UL << 25)
#define DICE_EXT_STATUS_WC_SLIP (1UL << 26)

//   VERSION register
#define DICE_DRIVER_SPEC_VERSION_NUMBER_GET(x, y) \
	(((x) >> (y)) & 0xFF)

#define DICE_DRIVER_SPEC_VERSION_NUMBER_GET_A(x) \
	DICE_DRIVER_SPEC_VERSION_NUMBER_GET(x, 24)

#define DICE_DRIVER_SPEC_VERSION_NUMBER_GET_B(x) \
	DICE_DRIVER_SPEC_VERSION_NUMBER_GET(x, 16)

#define DICE_DRIVER_SPEC_VERSION_NUMBER_GET_C(x) \
	DICE_DRIVER_SPEC_VERSION_NUMBER_GET(x, 8)

#define DICE_DRIVER_SPEC_VERSION_NUMBER_GET_D(x) \
	DICE_DRIVER_SPEC_VERSION_NUMBER_GET(x, 0)

//   CLOCKCAPABILITIES register
#define DICE_CLOCKCAP_RATE_32K (1UL << 0)
#define DICE_CLOCKCAP_RATE_44K1 (1UL << 1)
#define DICE_CLOCKCAP_RATE_48K (1UL << 2)
#define DICE_CLOCKCAP_RATE_88K2 (1UL << 3)
#define DICE_CLOCKCAP_RATE_96K (1UL << 4)
#define DICE_CLOCKCAP_RATE_176K4 (1UL << 5)
#define DICE_CLOCKCAP_RATE_192K (1UL << 6)
#define DICE_CLOCKCAP_SOURCE_AES1 (1UL << 16)
#define DICE_CLOCKCAP_SOURCE_AES2 (1UL << 17)
#define DICE_CLOCKCAP_SOURCE_AES3 (1UL << 18)
#define DICE_CLOCKCAP_SOURCE_AES4 (1UL << 19)
#define DICE_CLOCKCAP_SOURCE_AES_ANY (1UL << 20)
#define DICE_CLOCKCAP_SOURCE_ADAT (1UL << 21)
#define DICE_CLOCKCAP_SOURCE_TDIF (1UL << 22)
#define DICE_CLOCKCAP_SOURCE_WORDCLOCK (1UL << 23)
#define DICE_CLOCKCAP_SOURCE_ARX1 (1UL << 24)
#define DICE_CLOCKCAP_SOURCE_ARX2 (1UL << 25)
#define DICE_CLOCKCAP_SOURCE_ARX3 (1UL << 26)
#define DICE_CLOCKCAP_SOURCE_ARX4 (1UL << 27)
#define DICE_CLOCKCAP_SOURCE_INTERNAL (1UL << 28)

//   CLOCKSOURCENAMES
// note: in bytes
#define DICE_CLOCKSOURCENAMES_SIZE 256

//  TX_PAR_SPACE registers
// note: in bytes
#define DICE_TX_NAMES_SIZE 256

//  RX_PAR_SPACE registers
// note: in bytes
#define DICE_RX_NAMES_SIZE 256

// EAP (Extended Application Protocol) Definitions
#define DICE_EAP_BASE 0x0000000000200000ULL
#define DICE_EAP_MAX_SIZE 0x0000000000F00000ULL

#define DICE_EAP_CAPABILITY_SPACE_OFF 0x0000
#define DICE_EAP_CAPABILITY_SPACE_SZ 0x0004
#define DICE_EAP_CMD_SPACE_OFF 0x0008
#define DICE_EAP_CMD_SPACE_SZ 0x000C
#define DICE_EAP_MIXER_SPACE_OFF 0x0010
#define DICE_EAP_MIXER_SPACE_SZ 0x0014
#define DICE_EAP_PEAK_SPACE_OFF 0x0018
#define DICE_EAP_PEAK_SPACE_SZ 0x001C
#define DICE_EAP_NEW_ROUTING_SPACE_OFF 0x0020
#define DICE_EAP_NEW_ROUTING_SPACE_SZ 0x0024
#define DICE_EAP_NEW_STREAM_CFG_SPACE_OFF 0x0028
#define DICE_EAP_NEW_STREAM_CFG_SPACE_SZ 0x002C
#define DICE_EAP_CURR_CFG_SPACE_OFF 0x0030
#define DICE_EAP_CURR_CFG_SPACE_SZ 0x0034
#define DICE_EAP_STAND_ALONE_CFG_SPACE_OFF 0x0038
#define DICE_EAP_STAND_ALONE_CFG_SPACE_SZ 0x003C
#define DICE_EAP_APP_SPACE_OFF 0x0040
#define DICE_EAP_APP_SPACE_SZ 0x0044
#define DICE_EAP_ZERO_MARKER_1 0x0048

// CAPABILITY registers
#define DICE_EAP_CAPABILITY_ROUTER 0x0000
#define DICE_EAP_CAPABILITY_MIXER 0x0004
#define DICE_EAP_CAPABILITY_GENERAL 0x0008
#define DICE_EAP_CAPABILITY_RESERVED 0x000C

// CAPABILITY bit definitions
#define DICE_EAP_CAP_ROUTER_EXPOSED 0
#define DICE_EAP_CAP_ROUTER_READONLY 1
#define DICE_EAP_CAP_ROUTER_FLASHSTORED 2
#define DICE_EAP_CAP_ROUTER_MAXROUTES 16

#define DICE_EAP_CAP_MIXER_EXPOSED 0
#define DICE_EAP_CAP_MIXER_READONLY 1
#define DICE_EAP_CAP_MIXER_FLASHSTORED 2
#define DICE_EAP_CAP_MIXER_IN_DEV 4
#define DICE_EAP_CAP_MIXER_OUT_DEV 8
#define DICE_EAP_CAP_MIXER_INPUTS 16
#define DICE_EAP_CAP_MIXER_OUTPUTS 24

#define DICE_EAP_CAP_GENERAL_STRM_CFG_EN 0
#define DICE_EAP_CAP_GENERAL_FLASH_EN 1
#define DICE_EAP_CAP_GENERAL_PEAK_EN 2
#define DICE_EAP_CAP_GENERAL_MAX_TX_STREAM 4
#define DICE_EAP_CAP_GENERAL_MAX_RX_STREAM 8
#define DICE_EAP_CAP_GENERAL_STRM_CFG_FLS 12
#define DICE_EAP_CAP_GENERAL_CHIP 16

#define DICE_EAP_CAP_GENERAL_CHIP_DICEII 0
#define DICE_EAP_CAP_GENERAL_CHIP_DICEMINI 1
#define DICE_EAP_CAP_GENERAL_CHIP_DICEJR 2

// COMMAND registers
#define DICE_EAP_COMMAND_OPCODE 0x0000
#define DICE_EAP_COMMAND_RETVAL 0x0004

// opcodes
#define DICE_EAP_CMD_OPCODE_NO_OP 0x0000
#define DICE_EAP_CMD_OPCODE_LD_ROUTER 0x0001
#define DICE_EAP_CMD_OPCODE_LD_STRM_CFG 0x0002
#define DICE_EAP_CMD_OPCODE_LD_RTR_STRM_CFG 0x0003
#define DICE_EAP_CMD_OPCODE_LD_FLASH_CFG 0x0004
#define DICE_EAP_CMD_OPCODE_ST_FLASH_CFG 0x0005

#define DICE_EAP_CMD_OPCODE_FLAG_LD_LOW (1U << 16)
#define DICE_EAP_CMD_OPCODE_FLAG_LD_MID (1U << 17)
#define DICE_EAP_CMD_OPCODE_FLAG_LD_HIGH (1U << 18)
#define DICE_EAP_CMD_OPCODE_FLAG_LD_EXECUTE (1U << 31)

// CURRENT CFG registers
#define DICE_EAP_CURRCFG_LOW_ROUTER 0x0000
#define DICE_EAP_CURRCFG_LOW_STREAM 0x1000
#define DICE_EAP_CURRCFG_MID_ROUTER 0x2000
#define DICE_EAP_CURRCFG_MID_STREAM 0x3000
#define DICE_EAP_CURRCFG_HIGH_ROUTER 0x4000
#define DICE_EAP_CURRCFG_HIGH_STREAM 0x5000

#define DICE_EAP_CHANNEL_CONFIG_NAMESTR_LEN_QUADS (64)
#define DICE_EAP_CHANNEL_CONFIG_NAMESTR_LEN_BYTES (4 * DICE_EAP_CHANNEL_CONFIG_NAMESTR_LEN_QUADS)

// DICE Notifier
#define DICE_NOTIFIER_BASE_ADDRESS 0x0000FFFFE0000000ULL
#define DICE_NOTIFIER_BLOCK_LENGTH 4

		// Route sources and destinations for EAP
		enum class RouteSource
		{
			AES = 0,
			ADAT = 1,
			Mixer = 2,
			InS0 = 4,
			InS1 = 5,
			ARM = 10,
			ARX0 = 11,
			ARX1 = 12,
			Muted = 15,
			Invalid = 16,
		};

		enum class RouteDestination
		{
			AES = 0,
			ADAT = 1,
			Mixer0 = 2,
			Mixer1 = 3,
			InS0 = 4,
			InS1 = 5,
			ARM = 10,
			ATX0 = 11,
			ATX1 = 12,
			Muted = 15,
			Invalid = 16,
		};

		// DICE chip types
		enum class DiceChipType
		{
			DiceII = 0,
			DiceMini = 1,
			DiceJr = 2,
			Unknown = 0xFF
		};

		// DICE configuration types
		enum class DiceConfig
		{
			Unknown,
			Low, // 32k-48k
			Mid, // 88.2k-96k
			High // 176.4k-192k
		};

	} // namespace DICE
} // namespace FWA
